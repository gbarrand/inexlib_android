// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file exlib.license for terms.

#ifndef exlib_GL_test
#define exlib_GL_test

#include "../OpenGL"

namespace exlib {
namespace GL {

class test {
private:
  test(){}
  virtual ~test() {}
  test(const test&){}
  test& operator=(const test&){return *this;}
public:
  static void do_gl(int a_w,int a_h) {

    ::glEnable(GL_DEPTH_TEST);
    ::glFrontFace(GL_CCW);
    //::glEnable(GL_CULL_FACE);
    //  So that lightning is correctly computed 
    // when some scaling is applied.
    ::glEnable(GL_NORMALIZE);
    ::glShadeModel(GL_FLAT);
    //::glEnable(GL_LIGHTING);
    //::glDisable(GL_LIGHT0);

    //printf("debug : %d %d\n",width,height);

    //::glEnable(GL_SCISSOR_TEST);

    ::glViewport(0,0,a_w,a_h);
    //::glScissor(0,0,a_w,a_h);

    // Better to clear after glViewport and glScissor 
    // (else problems with Mesa).
    ::glClearColor(0.8F,0.8F,0.8F,0);
    ::glClear(GL_COLOR_BUFFER_BIT);
    ::glClear(GL_DEPTH_BUFFER_BIT);

    //GLint viewport[4];
    //::glGetIntegerv(GL_VIEWPORT,viewport); //FIXME : android : bugged.
    //float aspect = ((float)viewport[2])/((float)viewport[3]);

    float aspect = ((float)a_w)/((float)a_h);

    // In OpenGL, by default,
    // camera is placed at origin, looking at -z, up along y.
    ::glMatrixMode(GL_PROJECTION); 
    ::glLoadIdentity();
    float half_height = 1;
#ifdef EXLIB_GL_GLES
    ::glOrthof(-aspect * half_height,aspect*half_height,
               -half_height,half_height,-100,100);
#else
    ::glOrtho(-aspect * half_height,aspect*half_height,
              -half_height,half_height,-100,100);
#endif

    ::glMatrixMode(GL_MODELVIEW);
    ::glLoadIdentity();

    //::glScaled(1,1,1);
    // Rotate then translate :
    ::glTranslatef(0,0,-10);
    ::glRotatef(30,0,1,0);
    ::glRotatef(30,1,0,0);

    draw();

    ::glFinish();
  }
private:
  static void draw() {
    //__android_log_print(ANDROID_LOG_INFO, "osc_plot", "debug : 014");

    ::glEnableClientState(GL_VERTEX_ARRAY);

    // Front :
   {::glColor4f(1,0,0,1);
    ::glNormal3f(0,0,1);
    GLfloat array[4][3] = {
      { 0.5F,-0.5F, 0.5F},
      { 0.5F, 0.5F, 0.5F},
      {-0.5F, 0.5F, 0.5F},
      {-0.5F,-0.5F, 0.5F}
    };
    ::glVertexPointer(3,GL_FLOAT,0,array);
    ::glDrawArrays(GL_TRIANGLE_FAN,0,4);}

    // Back :
   {::glColor4f(0,1,0,1);   //green
    ::glNormal3f(0,0,-1);
    GLfloat array[4][3] = {
      { 0.5F,-0.5F,-0.5F},
      {-0.5F,-0.5F,-0.5F},
      {-0.5F, 0.5F,-0.5F},
      { 0.5F, 0.5F,-0.5F}
    };
    ::glVertexPointer(3,GL_FLOAT,0,array);
    ::glDrawArrays(GL_TRIANGLE_FAN,0,4);}

    // lines joining front and back :
   {::glLineWidth(4);
    ::glColor4f(1,1,0,1);   //yellow
    GLfloat array[8][3] = {
      { 0.5F,-0.5F, 0.5F},
      { 0.5F,-0.5F,-0.5F},
  
      { 0.5F, 0.5F, 0.5F},
      { 0.5F, 0.5F,-0.5F},
  
      {-0.5F, 0.5F, 0.5F},
      {-0.5F, 0.5F,-0.5F},
  
      {-0.5F,-0.5F, 0.5F},
      {-0.5F,-0.5F,-0.5F}
    };
    ::glVertexPointer(3,GL_FLOAT,0,array);
    ::glDrawArrays(GL_LINES,0,8);}
  
    ::glDisableClientState(GL_VERTEX_ARRAY);
  }


};

}}

#endif

//exlib_build_use GL
