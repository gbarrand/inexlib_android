// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file inlib.license for terms.

#ifndef inlib_io_dumwbuf
#define inlib_io_dumwbuf

#include "iwbuf"

namespace inlib {
namespace io {

class dumwbuf : public virtual iwbuf {
public: //iwbuf
  virtual bool write(uchar) {return true;}
  virtual bool write(char) {return true;}
  virtual bool write(uint16) {return true;}
  virtual bool write(int16) {return true;}
  virtual bool write(uint32) {return true;}
  virtual bool write(int32) {return true;}
  virtual bool write(uint64) {return true;}
  virtual bool write(int64) {return true;}
  virtual bool write(float) {return true;}
  virtual bool write(double) {return true;}
  virtual bool write(bool) {return true;}

  virtual bool write_cstr(const char*) {return true;}

  virtual bool write_img(uint32,uint32,uint32,const uchar*) {return true;}

  virtual bool write_vec(uint32,const uchar*){return true;}
  virtual bool write_vec(uint32,const char*){return true;}
  virtual bool write_vec(uint32,const uint16*){return true;}
  virtual bool write_vec(uint32,const int16*){return true;}
  virtual bool write_vec(uint32,const uint32*){return true;}
  virtual bool write_vec(uint32,const int32*){return true;}
  virtual bool write_vec(uint32,const uint64*){return true;}
  virtual bool write_vec(uint32,const int64*){return true;}
  virtual bool write_vec(uint32,const float*){return true;}
  virtual bool write_vec(uint32,const double*){return true;}
  virtual bool write_vec(uint32,const bool*){return true;}

  virtual bool write_vec(const std::vector<std::string>&){return true;}
  virtual bool write_std_vec_vec(const std_vec_vec_uint_t&) {return true;}
  virtual bool write_std_vec_vec(const std_vec_vec_float_t&) {return true;}
  virtual bool write_std_vec_vec(const std_vec_vec_double_t&) {return true;}
  virtual bool write_std_vec_vec(const std_vec_vec_string_t&) {return true;}
public:
  virtual const char* buf() const {return 0;}
  virtual size_t length() const {return 0;}
public:
  dumwbuf(){}
  virtual ~dumwbuf(){}
public:
  dumwbuf(const dumwbuf& a_from):iwbuf(a_from){}
  dumwbuf& operator=(const dumwbuf&){return *this;}
};

}}

#endif
